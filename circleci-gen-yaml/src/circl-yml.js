const yaml = require('js-yaml');

class CircleYml{

  constructor(){
    this.yml = {
      version : 2,//action.params.version || 2,
      jobs : {},
      workflows: {
        version: 2
      }
    };
  }

  setJobs(results){
    const self = this;
    results.filter(result=>result.type=="job").map(jobResult=>{
      const environmentString = jobResult.data.environment;
      const envVarsString = environmentString.split('\n');
      const environment = {}
      envVarsString.forEach(varString => {
        const [key, val] = varString.split(': ');
        environment[key] = val;
      });
      
      const job = {
        environment,
        docker : [
          {image : jobResult.data.dockerImage}
        ],
        resource_class: jobResult.data.resourceClass || "medium",
        working_directory : jobResult.data.workingDirectory,
        steps : []
      }
  
      // Foreach step in job
      results.filter(result=>result.type=='step' && result.data.job==jobResult.data.name).forEach(stepResult=>{
        const stepOptions = stepResult.data.step_options;
        let step;
        stepOptions.params = stepOptions.params || [];
        if (!stepOptions.params.length)
          step = stepOptions.type;
        else {
          step = {};
          step[stepOptions.type] = {}
          stepOptions.params.forEach(param=>{
            step[stepOptions.type][param.key] = param.value;
          })
        }
  
        job.steps.push(step);
      })
  
      self.yml.jobs[jobResult.data.name]=job;
    })
    
  }

  setWorkflows(results){
    const self = this;
    
    results.filter(result=>result.type=="workflow-job").forEach(workflowJobResult=>{  
      const workflowJobData = workflowJobResult.data;
      const workflow = self.yml.workflows[workflowJobData.workflow] || {
        jobs : []
      };
      
      const job = {
        [workflowJobData.job]: {
          filters : {}
        }
      };
      
      //get filters
      results.filter(result=>
        result.type=="workflow-job-filter" && 
        result.data.workflow == workflowJobData.workflow &&
        result.data.job == workflowJobData.job
      ).forEach(workflowJobFilterResult=>{
        const filterData = workflowJobFilterResult.data;
        job[workflowJobData.job].filters[filterData.name]=filterData.options;
      })

      workflow.jobs.push(job);

      self.yml.workflows[workflowJobData.workflow] = workflow;
    })
    
  }

  toString(){
    const yamlString = 
    `# This is an autogenerated CircleCI yml
# By Kaholo :)
#
${yaml.safeDump(this.yml,{indent: 2})}
`;
    return yamlString;
  }
}

module.exports = CircleYml;